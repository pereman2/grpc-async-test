// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mes.proto

#include "mes.pb.h"
#include "mes.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcmgr {

static const char* MgrApi_method_names[] = {
  "/grpcmgr.MgrApi/var",
  "/grpcmgr.MgrApi/foo",
};

std::unique_ptr< MgrApi::Stub> MgrApi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MgrApi::Stub> stub(new MgrApi::Stub(channel, options));
  return stub;
}

MgrApi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_var_(MgrApi_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_foo_(MgrApi_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MgrApi::Stub::var(::grpc::ClientContext* context, const ::grpcmgr::event& request, ::grpcmgr::event* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcmgr::event, ::grpcmgr::event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_var_, context, request, response);
}

void MgrApi::Stub::async::var(::grpc::ClientContext* context, const ::grpcmgr::event* request, ::grpcmgr::event* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcmgr::event, ::grpcmgr::event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_var_, context, request, response, std::move(f));
}

void MgrApi::Stub::async::var(::grpc::ClientContext* context, const ::grpcmgr::event* request, ::grpcmgr::event* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_var_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcmgr::event>* MgrApi::Stub::PrepareAsyncvarRaw(::grpc::ClientContext* context, const ::grpcmgr::event& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcmgr::event, ::grpcmgr::event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_var_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcmgr::event>* MgrApi::Stub::AsyncvarRaw(::grpc::ClientContext* context, const ::grpcmgr::event& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncvarRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MgrApi::Stub::foo(::grpc::ClientContext* context, const ::grpcmgr::Empty& request, ::grpcmgr::event* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcmgr::Empty, ::grpcmgr::event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_foo_, context, request, response);
}

void MgrApi::Stub::async::foo(::grpc::ClientContext* context, const ::grpcmgr::Empty* request, ::grpcmgr::event* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcmgr::Empty, ::grpcmgr::event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_foo_, context, request, response, std::move(f));
}

void MgrApi::Stub::async::foo(::grpc::ClientContext* context, const ::grpcmgr::Empty* request, ::grpcmgr::event* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_foo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcmgr::event>* MgrApi::Stub::PrepareAsyncfooRaw(::grpc::ClientContext* context, const ::grpcmgr::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcmgr::event, ::grpcmgr::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_foo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcmgr::event>* MgrApi::Stub::AsyncfooRaw(::grpc::ClientContext* context, const ::grpcmgr::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfooRaw(context, request, cq);
  result->StartCall();
  return result;
}

MgrApi::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MgrApi_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MgrApi::Service, ::grpcmgr::event, ::grpcmgr::event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MgrApi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcmgr::event* req,
             ::grpcmgr::event* resp) {
               return service->var(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MgrApi_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MgrApi::Service, ::grpcmgr::Empty, ::grpcmgr::event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MgrApi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcmgr::Empty* req,
             ::grpcmgr::event* resp) {
               return service->foo(ctx, req, resp);
             }, this)));
}

MgrApi::Service::~Service() {
}

::grpc::Status MgrApi::Service::var(::grpc::ServerContext* context, const ::grpcmgr::event* request, ::grpcmgr::event* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MgrApi::Service::foo(::grpc::ServerContext* context, const ::grpcmgr::Empty* request, ::grpcmgr::event* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcmgr

